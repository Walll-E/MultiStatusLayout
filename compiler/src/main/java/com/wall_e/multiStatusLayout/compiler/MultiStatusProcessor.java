package com.wall_e.multiStatusLayout.compiler;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.wall_e.multiStatusLayout.annotation.MultiStatus;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.MirroredTypesException;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

@SuppressWarnings("unused")
@AutoService(Processor.class)
public class MultiStatusProcessor extends AbstractProcessor {

    private static final String CLASS_JAVA_DOC = "Generated by MultiStatusLayout. Do not edit id !!!";
    private static final String PACKAGE_NAME = "com.wall_e.multiStatusLayout";
    private static final String CLASS_PREFIX = "MultiStatus";
    private Filer mFilter;
    private Elements mElements;
    private Messager mMessager;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        mFilter = processingEnvironment.getFiler();
        mElements = processingEnvironment.getElementUtils();
        mMessager = processingEnvironment.getMessager();
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        final Set<String> annotationTypes = new LinkedHashSet<>();
        annotationTypes.add(MultiStatus.class.getCanonicalName());
        return annotationTypes;
    }


    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(MultiStatus.class);
        if (elements == null || elements.isEmpty()) {
            return true;
        }
        mMessager.printMessage(Diagnostic.Kind.NOTE, "<<<<<<<<<<<<<<<<<<< MultiStatusProcessor process START >>>>>>>>>>>>>>>");
        Map<String, String> viewProviderMap = new HashMap<>();
        List<String> viewClassList = new ArrayList<>();
        List<String> providerClassList = new ArrayList<>();
        parseParam(elements, viewClassList, providerClassList);
        mergeList(viewClassList, providerClassList, viewProviderMap);
        try {
            generate(viewProviderMap);
        } catch (IOException | ClassNotFoundException e) {
            mMessager.printMessage(Diagnostic.Kind.ERROR, "Exception occurred when generating class file.");
            e.printStackTrace();
        }
        mMessager.printMessage(Diagnostic.Kind.NOTE, "<<<<<<<<<<<<<<<<<<< MultiStatusProcessor process END >>>>>>>>>>>>>>>");
        return true;
    }

    private void mergeList(List<String> viewClassList, List<String> providerClassList, Map<String, String> viewProviderMap) {
        int providerSize = providerClassList.size();
        for (int i = 0; i < viewClassList.size(); i++) {
            String view = viewClassList.get(i);
            String provider = null;
            if (!providerClassList.isEmpty() && i < providerSize) {
                provider = providerClassList.get(i);
            }
            viewProviderMap.put(view, provider);
        }
    }


    private void parseParam(Set<? extends Element> elements, List<String> viewClassList, List<String> providerClassList) {
        for (Element element : elements) {
            String name = element.getSimpleName().toString();
            checkAnnotationValid(element, MultiStatus.class);
            TypeElement typeElement = (TypeElement) element;
            MultiStatus multiStatus = typeElement.getAnnotation(MultiStatus.class);
            addViewClassAndProvider(multiStatus, viewClassList, false);
            addViewClassAndProvider(multiStatus, providerClassList, true);
        }
    }

    private void addViewClassAndProvider(MultiStatus multiStatus, List<String> classList, boolean isProvider) {
        try {
            if (isProvider) {
                multiStatus.provider();
            } else {
                multiStatus.value();
            }
        } catch (MirroredTypesException e) {
            List<? extends TypeMirror> typeMirrors = e.getTypeMirrors();
            for (TypeMirror typeMirror : typeMirrors) {
                DeclaredType declaredType = (DeclaredType) typeMirror;
                TypeElement classTypeElement = (TypeElement) declaredType.asElement();
                String qualifiedName = classTypeElement.getQualifiedName().toString();
                classList.add(qualifiedName);
            }
        }
    }


    private void generate(Map<String, String> viewProviderMap) throws IOException, ClassNotFoundException {
        for (Map.Entry<String, String> entry : viewProviderMap.entrySet()) {
            String clazz = entry.getKey();
            String provider = entry.getValue();
            int lastDotIndex = clazz.lastIndexOf(".");
            String superPackageName = clazz.substring(0, lastDotIndex);
            String superClassName = clazz.substring(lastDotIndex + 1);
            String className;
            if (superClassName.equals("RelativeLayout")) {
                className = CLASS_PREFIX + "Layout";
            } else {
                className = CLASS_PREFIX + superClassName;
            }

            mMessager.printMessage(Diagnostic.Kind.NOTE, clazz + "=======>" + className);

            TypeSpec.Builder builder = TypeSpec.classBuilder(className)
                    .addJavadoc(CLASS_JAVA_DOC)
                    .addModifiers(Modifier.PUBLIC)
                    .superclass(ClassName.get(superPackageName, superClassName))
                    .addSuperinterface(ClassName.get(PACKAGE_NAME, "MultiStatusEvent"))
                    .addField(ClassName.get(PACKAGE_NAME, "MultiStatusHelper"), "mMultiStatusHelper", Modifier.PRIVATE);

            generateMethod(builder, clazz, provider);

            JavaFile javaFile = JavaFile.builder(PACKAGE_NAME, builder.build()).build();
            javaFile.writeTo(mFilter);
        }
    }

    private void generateMethod(TypeSpec.Builder builder, String clazz, String providerClassPath) {
        constructor(builder, clazz, providerClassPath);
        showOther(builder);
        showLoading(builder);
        showEmpty(builder);
        showContent(builder);
        showError(builder);
        showNetError(builder);
        getOtherView(builder);
        getLoadingView(builder);
        getNetErrorView(builder);
        getEmptyView(builder);
        getErrorView(builder);
        setOtherView(builder);
        setLoadingView(builder);
        setNetErrorView(builder);
        setEmptyView(builder);
        setErrorView(builder);
        setTargetViewId(builder);
        getTargetViewId(builder);
        getShowViewType(builder);
        setOnReloadDataListener(builder);
        setErrorReloadViewId(builder);
        setNetErrorReloadViewId(builder);
        String suffix = ".interf";
        setOnContentReferenceIdsAction(builder, suffix);
        setOnEmptyReferenceIdsAction(builder, suffix);
        setOnErrorReferenceIdsAction(builder, suffix);
        setOnOtherReferenceIdsAction(builder, suffix);
        setOnLoadingReferenceIdsAction(builder, suffix);
        setOnNetErrorReferenceIdsAction(builder, suffix);
        setViewConstraintProvider(builder);
        setViewConstraintProviderClass(builder, clazz, providerClassPath);
    }


    private void setOnReloadDataListener(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setOnReloadDataListener")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(PACKAGE_NAME, "OnReloadDataListener"), "onReloadDataListener")
                .addStatement("mMultiStatusHelper.setOnReloadDataListener(onReloadDataListener)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setOnContentReferenceIdsAction(TypeSpec.Builder builder, String suffix) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setOnContentReferenceIdsAction")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(PACKAGE_NAME + suffix, "OnContentReferenceIdsAction"), "onContentReferenceIdsAction")
                .addStatement("mMultiStatusHelper.setOnContentReferenceIdsAction(onContentReferenceIdsAction)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setOnOtherReferenceIdsAction(TypeSpec.Builder builder, String suffix) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setOnOtherReferenceIdsAction")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(PACKAGE_NAME + suffix, "OnOtherReferenceIdsAction"), "onOtherReferenceIdsAction")
                .addStatement("mMultiStatusHelper.setOnOtherReferenceIdsAction(onOtherReferenceIdsAction)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setOnEmptyReferenceIdsAction(TypeSpec.Builder builder, String suffix) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setOnEmptyReferenceIdsAction")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(PACKAGE_NAME + suffix, "OnEmptyReferenceIdsAction"), "onEmptyReferenceIdsAction")
                .addStatement("mMultiStatusHelper.setOnEmptyReferenceIdsAction(onEmptyReferenceIdsAction)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setOnErrorReferenceIdsAction(TypeSpec.Builder builder, String suffix) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setOnErrorReferenceIdsAction")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(PACKAGE_NAME + suffix, "OnErrorReferenceIdsAction"), "onErrorReferenceIdsAction")
                .addStatement("mMultiStatusHelper.setOnErrorReferenceIdsAction(onErrorReferenceIdsAction)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setOnNetErrorReferenceIdsAction(TypeSpec.Builder builder, String suffix) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setOnNetErrorReferenceIdsAction")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(PACKAGE_NAME + suffix, "OnNetErrorReferenceIdsAction"), "onNetErrorReferenceIdsAction")
                .addStatement("mMultiStatusHelper.setOnNetErrorReferenceIdsAction(onNetErrorReferenceIdsAction)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setOnLoadingReferenceIdsAction(TypeSpec.Builder builder, String suffix) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setOnLoadingReferenceIdsAction")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(PACKAGE_NAME + suffix, "OnLoadingReferenceIdsAction"), "onLoadingReferenceIdsAction")
                .addStatement("mMultiStatusHelper.setOnLoadingReferenceIdsAction(onLoadingReferenceIdsAction)")
                .build();
        builder.addMethod(methodSpec);
    }


    private void setViewConstraintProvider(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setViewConstraintProvider")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(PACKAGE_NAME + ".annotation", "ViewConstraintProvider"), "viewConstraintProvider")
                .addStatement("mMultiStatusHelper.setViewConstraintProvider(viewConstraintProvider)")
                .build();
        builder.addMethod(methodSpec);
    }


    private void getShowViewType(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("getShowViewType")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mMultiStatusHelper.getShowViewType()")
                .returns(TypeName.INT)
                .build();
        builder.addMethod(methodSpec);
    }

    private void getTargetViewId(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("getTargetViewId")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mMultiStatusHelper.getTargetViewId()")
                .returns(TypeName.INT)
                .build();
        builder.addMethod(methodSpec);

    }

    private void setTargetViewId(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setTargetViewId")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(TypeName.INT, "viewId")
                .addStatement("mMultiStatusHelper.setTargetViewId(viewId)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setNetErrorReloadViewId(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setNetErrorReloadViewId")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(TypeName.INT, "netErrorReloadViewId")
                .addStatement("mMultiStatusHelper.setNetErrorReloadViewId(netErrorReloadViewId)")
                .build();
        builder.addMethod(methodSpec);
    }


    private void setErrorReloadViewId(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setErrorReloadViewId")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(TypeName.INT, "errorReloadViewId")
                .addStatement("mMultiStatusHelper.setErrorReloadViewId(errorReloadViewId)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setErrorView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setErrorView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(TypeName.INT, "layoutId")
                .addStatement("mMultiStatusHelper.setErrorView(layoutId)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setEmptyView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setEmptyView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(TypeName.INT, "layoutId")
                .addStatement("mMultiStatusHelper.setEmptyView(layoutId)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setNetErrorView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setNetErrorView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(TypeName.INT, "layoutId")
                .addStatement("mMultiStatusHelper.setNetErrorView(layoutId)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setLoadingView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setLoadingView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(TypeName.INT, "layoutId")
                .addStatement("mMultiStatusHelper.setLoadingView(layoutId)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void setOtherView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("setOtherView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(TypeName.INT, "layoutId")
                .addStatement("mMultiStatusHelper.setOtherView(layoutId)")
                .build();
        builder.addMethod(methodSpec);
    }

    private void getErrorView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("getErrorView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mMultiStatusHelper.getErrorView()")
                .returns(ClassName.get("android.view", "View"))
                .build();
        builder.addMethod(methodSpec);
    }

    private void getEmptyView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("getEmptyView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mMultiStatusHelper.getEmptyView()")
                .returns(ClassName.get("android.view", "View"))
                .build();
        builder.addMethod(methodSpec);
    }

    private void getNetErrorView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("getNetErrorView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mMultiStatusHelper.getNetErrorView()")
                .returns(ClassName.get("android.view", "View"))
                .build();
        builder.addMethod(methodSpec);
    }

    private void getLoadingView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("getLoadingView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mMultiStatusHelper.getLoadingView()")
                .returns(ClassName.get("android.view", "View"))
                .build();
        builder.addMethod(methodSpec);
    }

    private void getOtherView(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("getOtherView")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mMultiStatusHelper.getOtherView()")
                .returns(ClassName.get("android.view", "View"))
                .build();
        builder.addMethod(methodSpec);
    }

    private void showNetError(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("showNetError")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("mMultiStatusHelper.showNetError()")
                .build();
        builder.addMethod(methodSpec);
    }

    private void showError(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("showError")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("mMultiStatusHelper.showError()")
                .build();
        builder.addMethod(methodSpec);
    }

    private void showContent(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("showContent")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("mMultiStatusHelper.showContent()")
                .build();
        builder.addMethod(methodSpec);
    }

    private void showEmpty(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("showEmpty")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("mMultiStatusHelper.showEmpty()")
                .build();
        builder.addMethod(methodSpec);
    }

    private void showLoading(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("showLoading")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("mMultiStatusHelper.showLoading()")
                .build();
        builder.addMethod(methodSpec);
    }

    private void showOther(TypeSpec.Builder builder) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("showOther")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("mMultiStatusHelper.showOther()")
                .build();
        builder.addMethod(methodSpec);
    }

    private void constructor(TypeSpec.Builder builder, String clazz, String providerClassPath) {
        TypeName contextType = ClassName.get("android.content", "Context");
        TypeName attributeSetType = ClassName.get("android.util", "AttributeSet");
        MethodSpec constructorOne = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addParameter(contextType, "context")
                .addStatement("this(context,null)")
                .build();
        MethodSpec constructorTwo = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addParameter(contextType, "context")
                .addParameter(attributeSetType, "attrs")
                .addStatement("this(context,attrs,0)")
                .build();
        MethodSpec constructorThree = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addParameter(contextType, "context")
                .addParameter(attributeSetType, "attrs")
                .addParameter(TypeName.INT, "defStyleAttr")
                .addStatement("super(context,attrs,defStyleAttr)")
                .addStatement("mMultiStatusHelper = new MultiStatusHelper(context,attrs,defStyleAttr,this)")
                .addStatement("generateProviderClass($S)", providerClassPath)
                .build();
        builder.addMethod(constructorOne)
                .addMethod(constructorTwo)
                .addMethod(constructorThree);
    }


    private void setViewConstraintProviderClass(TypeSpec.Builder builder, String className, String providerClassPath) {
        MethodSpec methodSpec = MethodSpec.methodBuilder("generateProviderClass")
                .addModifiers(Modifier.PRIVATE)
                .addParameter(String.class, "providerClassPath")
                .beginControlFlow("if(providerClassPath == null)")
                .addStatement("return")
                .endControlFlow()
                .beginControlFlow("try")
                .addStatement("$T providerClass = $T.forName($S)", Class.class, Class.class, providerClassPath)
                .addStatement("mMultiStatusHelper.setViewConstraintProvider(providerClass)")
                .addStatement("} catch ($T e) { \n e.printStackTrace()", ClassNotFoundException.class)
                .endControlFlow()
                .build();
        builder.addMethod(methodSpec);
    }


    private boolean checkAnnotationValid(Element element, Class clazz) {
        if (element.getKind() != ElementKind.CLASS) {
            printError(element, "%s must be declared on class .", clazz.getSimpleName());
            return false;
        }
        if (element.getModifiers().contains(Modifier.PRIVATE)) {
            printError(element, "%s must can not be private .", (TypeElement) element);
            return false;
        }
        return true;
    }

    private void printError(Element element, String message, Object... args) {
        if (args.length > 0) {
            message = String.format(message, args);
        }
        mMessager.printMessage(Diagnostic.Kind.ERROR, message, element);
    }

    private boolean isAssignable(String childClazz, String superClazz) {
        return processingEnv.getTypeUtils().isAssignable(
                processingEnv.getElementUtils().getTypeElement(childClazz).asType(),
                processingEnv.getElementUtils().getTypeElement(superClazz).asType());

    }
}
